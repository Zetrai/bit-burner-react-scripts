export async function main(ns) {
    const target = `${ns.args[0]}`;
    let serverMoneyAvailable = ns.getServerMoneyAvailable(target);
    let serverMaxMoney = ns.getServerMaxMoney(target);
    while (serverMoneyAvailable < serverMaxMoney * 0.75) {
        serverMoneyAvailable = ns.getServerMoneyAvailable(target);
        serverMaxMoney = ns.getServerMaxMoney(target);
        ns.print('-------------------------------------------------------');
        ns.print('Server money available on ' +
            target +
            ' is ' +
            ns.nFormat(serverMoneyAvailable, '$0.000a' + '.'));
        ns.print('Server max money on ' +
            target +
            ' is ' +
            ns.nFormat(serverMaxMoney, '$0.000a' + '.'));
        ns.print('Starting grow on ' +
            target +
            ' with ' +
            ns.getHostname() +
            ' to ' +
            ns.nFormat(serverMaxMoney * 0.75, '$0.000a') +
            '...');
        await ns.grow(target);
    }
    serverMoneyAvailable = ns.getServerMoneyAvailable(target);
    serverMaxMoney = ns.getServerMaxMoney(target);
    ns.print('-------------------------------------------------------');
    ns.print('Optimal current money on ' + target + ' reached !!!');
    ns.print('Server money available on ' +
        target +
        ' is ' +
        ns.nFormat(serverMoneyAvailable, '$0.000a' + '.'));
    ns.print('Server max money on' +
        target +
        ' is ' +
        ns.nFormat(serverMaxMoney, '$0.000a' + '.'));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvdy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2Vhcmx5L2dyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUMvQixNQUFNLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUUvQixJQUFJLG9CQUFvQixHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5RCxJQUFJLGNBQWMsR0FBRyxFQUFFLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFbEQsT0FBTyxvQkFBb0IsR0FBRyxjQUFjLEdBQUcsSUFBSSxFQUFFO1FBQ25ELG9CQUFvQixHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxRCxjQUFjLEdBQUcsRUFBRSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRTlDLEVBQUUsQ0FBQyxLQUFLLENBQUMseURBQXlELENBQUMsQ0FBQztRQUNwRSxFQUFFLENBQUMsS0FBSyxDQUNOLDRCQUE0QjtZQUMxQixNQUFNO1lBQ04sTUFBTTtZQUNOLEVBQUUsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLEVBQUUsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUNwRCxDQUFDO1FBQ0YsRUFBRSxDQUFDLEtBQUssQ0FDTixzQkFBc0I7WUFDcEIsTUFBTTtZQUNOLE1BQU07WUFDTixFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQzlDLENBQUM7UUFDRixFQUFFLENBQUMsS0FBSyxDQUNOLG1CQUFtQjtZQUNqQixNQUFNO1lBQ04sUUFBUTtZQUNSLEVBQUUsQ0FBQyxXQUFXLEVBQUU7WUFDaEIsTUFBTTtZQUNOLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLElBQUksRUFBRSxTQUFTLENBQUM7WUFDNUMsS0FBSyxDQUNSLENBQUM7UUFFRixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkI7SUFFRCxvQkFBb0IsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUQsY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU5QyxFQUFFLENBQUMsS0FBSyxDQUFDLHlEQUF5RCxDQUFDLENBQUM7SUFDcEUsRUFBRSxDQUFDLEtBQUssQ0FBQywyQkFBMkIsR0FBRyxNQUFNLEdBQUcsY0FBYyxDQUFDLENBQUM7SUFDaEUsRUFBRSxDQUFDLEtBQUssQ0FDTiw0QkFBNEI7UUFDMUIsTUFBTTtRQUNOLE1BQU07UUFDTixFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLFNBQVMsR0FBRyxHQUFHLENBQUMsQ0FDcEQsQ0FBQztJQUNGLEVBQUUsQ0FBQyxLQUFLLENBQ04scUJBQXFCO1FBQ25CLE1BQU07UUFDTixNQUFNO1FBQ04sRUFBRSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsU0FBUyxHQUFHLEdBQUcsQ0FBQyxDQUM5QyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnN0YW50LWNvbmRpdGlvbiAqL1xyXG5pbXBvcnQgeyBOUyB9IGZyb20gJ0Bucyc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWFpbihuczogTlMpOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCB0YXJnZXQgPSBgJHtucy5hcmdzWzBdfWA7XHJcblxyXG4gIGxldCBzZXJ2ZXJNb25leUF2YWlsYWJsZSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCk7XHJcbiAgbGV0IHNlcnZlck1heE1vbmV5ID0gbnMuZ2V0U2VydmVyTWF4TW9uZXkodGFyZ2V0KTtcclxuXHJcbiAgd2hpbGUgKHNlcnZlck1vbmV5QXZhaWxhYmxlIDwgc2VydmVyTWF4TW9uZXkgKiAwLjc1KSB7XHJcbiAgICBzZXJ2ZXJNb25leUF2YWlsYWJsZSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCk7XHJcbiAgICBzZXJ2ZXJNYXhNb25leSA9IG5zLmdldFNlcnZlck1heE1vbmV5KHRhcmdldCk7XHJcblxyXG4gICAgbnMucHJpbnQoJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcclxuICAgIG5zLnByaW50KFxyXG4gICAgICAnU2VydmVyIG1vbmV5IGF2YWlsYWJsZSBvbiAnICtcclxuICAgICAgICB0YXJnZXQgK1xyXG4gICAgICAgICcgaXMgJyArXHJcbiAgICAgICAgbnMubkZvcm1hdChzZXJ2ZXJNb25leUF2YWlsYWJsZSwgJyQwLjAwMGEnICsgJy4nKVxyXG4gICAgKTtcclxuICAgIG5zLnByaW50KFxyXG4gICAgICAnU2VydmVyIG1heCBtb25leSBvbiAnICtcclxuICAgICAgICB0YXJnZXQgK1xyXG4gICAgICAgICcgaXMgJyArXHJcbiAgICAgICAgbnMubkZvcm1hdChzZXJ2ZXJNYXhNb25leSwgJyQwLjAwMGEnICsgJy4nKVxyXG4gICAgKTtcclxuICAgIG5zLnByaW50KFxyXG4gICAgICAnU3RhcnRpbmcgZ3JvdyBvbiAnICtcclxuICAgICAgICB0YXJnZXQgK1xyXG4gICAgICAgICcgd2l0aCAnICtcclxuICAgICAgICBucy5nZXRIb3N0bmFtZSgpICtcclxuICAgICAgICAnIHRvICcgK1xyXG4gICAgICAgIG5zLm5Gb3JtYXQoc2VydmVyTWF4TW9uZXkgKiAwLjc1LCAnJDAuMDAwYScpICtcclxuICAgICAgICAnLi4uJ1xyXG4gICAgKTtcclxuXHJcbiAgICBhd2FpdCBucy5ncm93KHRhcmdldCk7XHJcbiAgfVxyXG5cclxuICBzZXJ2ZXJNb25leUF2YWlsYWJsZSA9IG5zLmdldFNlcnZlck1vbmV5QXZhaWxhYmxlKHRhcmdldCk7XHJcbiAgc2VydmVyTWF4TW9uZXkgPSBucy5nZXRTZXJ2ZXJNYXhNb25leSh0YXJnZXQpO1xyXG5cclxuICBucy5wcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xyXG4gIG5zLnByaW50KCdPcHRpbWFsIGN1cnJlbnQgbW9uZXkgb24gJyArIHRhcmdldCArICcgcmVhY2hlZCAhISEnKTtcclxuICBucy5wcmludChcclxuICAgICdTZXJ2ZXIgbW9uZXkgYXZhaWxhYmxlIG9uICcgK1xyXG4gICAgICB0YXJnZXQgK1xyXG4gICAgICAnIGlzICcgK1xyXG4gICAgICBucy5uRm9ybWF0KHNlcnZlck1vbmV5QXZhaWxhYmxlLCAnJDAuMDAwYScgKyAnLicpXHJcbiAgKTtcclxuICBucy5wcmludChcclxuICAgICdTZXJ2ZXIgbWF4IG1vbmV5IG9uJyArXHJcbiAgICAgIHRhcmdldCArXHJcbiAgICAgICcgaXMgJyArXHJcbiAgICAgIG5zLm5Gb3JtYXQoc2VydmVyTWF4TW9uZXksICckMC4wMDBhJyArICcuJylcclxuICApO1xyXG59XHJcbiJdfQ==